// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250325195825_NewLayout2")]
    partial class NewLayout2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FantasyDB.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FantasyDB.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weekday")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("FantasyDB.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BirthDay")
                        .HasColumnType("int");

                    b.Property<string>("BirthMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("Build")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefiningFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eyes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Fear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeightCm")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Magic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Misbelief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motivation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<string>("SocialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weakness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("FantasyDB.Models.CharacterRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Character1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Character2Id")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipDynamic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Character1Id");

                    b.HasIndex("Character2Id");

                    b.HasIndex("SnapshotId");

                    b.ToTable("CharacterRelationships");
                });

            modelBuilder.Entity("FantasyDB.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Crown")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Penny")
                        .HasColumnType("int");

                    b.Property<int?>("Shilling")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("FantasyDB.Models.Era", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("MagicStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MagicSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId");

                    b.ToTable("Eras");
                });

            modelBuilder.Entity("FantasyDB.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FantasyDB.Models.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FounderId")
                        .HasColumnType("int");

                    b.Property<int?>("FoundingYear")
                        .HasColumnType("int");

                    b.Property<int?>("HQLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Magic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FounderId");

                    b.HasIndex("HQLocationId");

                    b.HasIndex("LeaderId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+LanguageLocation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("LanguagesLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointItem", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("PlotPointsItems");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointCharacter", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("PlotPointsCharacters");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointCharacterRelationship", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterRelationshipId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "CharacterRelationshipId");

                    b.HasIndex("CharacterRelationshipId");

                    b.ToTable("PlotPointsCharacterRelationships");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointEra", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("EraId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "EraId");

                    b.HasIndex("EraId");

                    b.ToTable("PlotPointsEras");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointEvent", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("PlotPointsEvents");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointFaction", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("PlotPointsFactions");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointLocation", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("PlotPointsLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRiver", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "RiverId");

                    b.HasIndex("RiverId");

                    b.ToTable("PlotPointsRivers");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRoute", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("PlotPointsRoutes");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotItem", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("SnapshotsItems");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotCharacter", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("SnapshotsCharacters");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotCharacterRelationship", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterRelationshipId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "CharacterRelationshipId");

                    b.HasIndex("CharacterRelationshipId");

                    b.ToTable("SnapshotsCharacterRelationships");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotEra", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("EraId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "EraId");

                    b.HasIndex("EraId");

                    b.ToTable("SnapshotsEras");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotEvent", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("SnapshotsEvents");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotFaction", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("SnapshotsFactions");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotLocation", b =>
                {
                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("SnapshotId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("SnapshotsLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("FantasyDB.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cultures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DivineMagicians")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Politics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPopulation")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WildMagicians")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FantasyDB.Models.PlotPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int");

                    b.Property<string>("ChapterOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnapshotId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("PlotPoints");
                });

            modelBuilder.Entity("FantasyDB.Models.PriceExample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exclusivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PriceExamples");
                });

            modelBuilder.Entity("FantasyDB.Models.River", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepthMeters")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<string>("FlowDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("WidthMeters")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("SourceLocationId");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("FantasyDB.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromId")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToId")
                        .HasColumnType("int");

                    b.Property<string>("TravelTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("FantasyDB.Models.Snapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Act")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chapter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("FantasyDB.Models.Item", b =>
                {
                    b.HasOne("FantasyDB.Models.Character", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.Calendar", b =>
                {
                    b.HasOne("FantasyDB.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FantasyDB.Models.Character", b =>
                {
                    b.HasOne("FantasyDB.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("FantasyDB.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Faction");

                    b.Navigation("Language");

                    b.Navigation("Location");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.CharacterRelationship", b =>
                {
                    b.HasOne("FantasyDB.Models.Character", "Character1")
                        .WithMany()
                        .HasForeignKey("Character1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Character2")
                        .WithMany()
                        .HasForeignKey("Character2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Character1");

                    b.Navigation("Character2");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.Era", b =>
                {
                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.Event", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.Faction", b =>
                {
                    b.HasOne("FantasyDB.Models.Character", "Founder")
                        .WithMany()
                        .HasForeignKey("FounderId");

                    b.HasOne("FantasyDB.Models.Location", "HQLocation")
                        .WithMany()
                        .HasForeignKey("HQLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Founder");

                    b.Navigation("HQLocation");

                    b.Navigation("Leader");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+LanguageLocation", b =>
                {
                    b.HasOne("FantasyDB.Models.Language", "Language")
                        .WithMany("LanguageLocations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany("LanguageLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointItem", b =>
                {
                    b.HasOne("FantasyDB.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointItems")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointCharacter", b =>
                {
                    b.HasOne("FantasyDB.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointCharacters")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointCharacterRelationship", b =>
                {
                    b.HasOne("FantasyDB.Models.CharacterRelationship", "CharacterRelationship")
                        .WithMany()
                        .HasForeignKey("CharacterRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointCharacterRelationships")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterRelationship");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointEra", b =>
                {
                    b.HasOne("FantasyDB.Models.Era", "Era")
                        .WithMany()
                        .HasForeignKey("EraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointEras")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Era");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointEvent", b =>
                {
                    b.HasOne("FantasyDB.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointEvents")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointFaction", b =>
                {
                    b.HasOne("FantasyDB.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointFactions")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointLocation", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointLocations")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRiver", b =>
                {
                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointRivers")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.River", "River")
                        .WithMany()
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlotPoint");

                    b.Navigation("River");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRoute", b =>
                {
                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointRoutes")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlotPoint");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotItem", b =>
                {
                    b.HasOne("FantasyDB.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotCharacter", b =>
                {
                    b.HasOne("FantasyDB.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotCharacterRelationship", b =>
                {
                    b.HasOne("FantasyDB.Models.CharacterRelationship", "CharacterRelationship")
                        .WithMany()
                        .HasForeignKey("CharacterRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterRelationship");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotEra", b =>
                {
                    b.HasOne("FantasyDB.Models.Era", "Era")
                        .WithMany()
                        .HasForeignKey("EraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Era");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotEvent", b =>
                {
                    b.HasOne("FantasyDB.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotFaction", b =>
                {
                    b.HasOne("FantasyDB.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+SnapshotLocation", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.Location", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("ParentLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentLocation");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.PlotPoint", b =>
                {
                    b.HasOne("FantasyDB.Models.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Snapshot", "Snapshot")
                        .WithMany()
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Calendar");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("FantasyDB.Models.River", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "DestinationLocation")
                        .WithMany()
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "SourceLocation")
                        .WithMany()
                        .HasForeignKey("SourceLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DestinationLocation");

                    b.Navigation("SourceLocation");
                });

            modelBuilder.Entity("FantasyDB.Models.Route", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("FantasyDB.Models.Language", b =>
                {
                    b.Navigation("LanguageLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("LanguageLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.PlotPoint", b =>
                {
                    b.Navigation("PlotPointItems");

                    b.Navigation("PlotPointCharacterRelationships");

                    b.Navigation("PlotPointCharacters");

                    b.Navigation("PlotPointEras");

                    b.Navigation("PlotPointEvents");

                    b.Navigation("PlotPointFactions");

                    b.Navigation("PlotPointLocations");

                    b.Navigation("PlotPointRivers");

                    b.Navigation("PlotPointRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
