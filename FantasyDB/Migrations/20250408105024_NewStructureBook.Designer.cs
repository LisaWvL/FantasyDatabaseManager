// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408105024_NewStructureBook")]
    partial class NewStructureBook
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FantasyDB.Models.Act", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActNumber")
                        .HasColumnType("int");

                    b.Property<string>("ActSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActToDo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActWordCount")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Acts");
                });

            modelBuilder.Entity("FantasyDB.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookNumber")
                        .HasColumnType("int");

                    b.Property<string>("BookSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookToDo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookWordCount")
                        .HasColumnType("int");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("FantasyDB.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weekday")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("FantasyDB.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<int?>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<string>("ChapterSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("POVCharacterId")
                        .HasColumnType("int");

                    b.Property<string>("ToDo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WordCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.HasIndex("POVCharacterId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("FantasyDB.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BirthDay")
                        .HasColumnType("int");

                    b.Property<string>("BirthMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("Build")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("DefiningFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eyes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Fear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeightCm")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Magic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Misbelief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motivation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weakness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("FactionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("FantasyDB.Models.CharacterRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("Character1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Character2Id")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipDynamic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("Character1Id");

                    b.HasIndex("Character2Id");

                    b.ToTable("CharacterRelationships");
                });

            modelBuilder.Entity("FantasyDB.Models.ConversationTurn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("DanMode")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSummary")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<string>("Prompt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SummaryLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TokenCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlotPointId");

                    b.ToTable("ConversationTurns");
                });

            modelBuilder.Entity("FantasyDB.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Crown")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Penny")
                        .HasColumnType("int");

                    b.Property<int?>("Shilling")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("FantasyDB.Models.Era", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("MagicStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MagicSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Eras");
                });

            modelBuilder.Entity("FantasyDB.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentLocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FantasyDB.Models.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("FounderId")
                        .HasColumnType("int");

                    b.Property<int?>("FoundingYear")
                        .HasColumnType("int");

                    b.Property<int?>("HQLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Magic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("FounderId");

                    b.HasIndex("HQLocationId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("FantasyDB.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Effects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+LanguageLocation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("LanguagesLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRiver", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "RiverId");

                    b.HasIndex("RiverId");

                    b.ToTable("PlotPointsRivers");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRoute", b =>
                {
                    b.Property<int>("PlotPointId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("PlotPointId", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("PlotPointsRoutes");
                });

            modelBuilder.Entity("FantasyDB.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("FantasyDB.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Cultures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DivineMagicians")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Politics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalPopulation")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WildMagicians")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ParentLocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FantasyDB.Models.PlotPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("endDateId")
                        .HasColumnType("int");

                    b.Property<int?>("startDateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("endDateId");

                    b.HasIndex("startDateId");

                    b.ToTable("PlotPoints");
                });

            modelBuilder.Entity("FantasyDB.Models.PriceExample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exclusivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PriceExamples");
                });

            modelBuilder.Entity("FantasyDB.Models.River", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepthMeters")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<string>("FlowDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("WidthMeters")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("SourceLocationId");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("FantasyDB.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromId")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToId")
                        .HasColumnType("int");

                    b.Property<string>("TravelTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("FantasyDB.Models.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("SceneNumber")
                        .HasColumnType("int");

                    b.Property<string>("SceneSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneToDo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SceneWordCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("FantasyDB.Models.Act", b =>
                {
                    b.HasOne("FantasyDB.Models.Book", "Book")
                        .WithMany("Acts")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("FantasyDB.Models.Calendar", b =>
                {
                    b.HasOne("FantasyDB.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FantasyDB.Models.Chapter", b =>
                {
                    b.HasOne("FantasyDB.Models.Act", "Act")
                        .WithMany("Chapters")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Character", "POVCharacter")
                        .WithMany()
                        .HasForeignKey("POVCharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Act");

                    b.Navigation("POVCharacter");
                });

            modelBuilder.Entity("FantasyDB.Models.Character", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("FantasyDB.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");

                    b.Navigation("Faction");

                    b.Navigation("Language");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FantasyDB.Models.CharacterRelationship", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Character1")
                        .WithMany()
                        .HasForeignKey("Character1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Character2")
                        .WithMany()
                        .HasForeignKey("Character2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");

                    b.Navigation("Character1");

                    b.Navigation("Character2");
                });

            modelBuilder.Entity("FantasyDB.Models.ConversationTurn", b =>
                {
                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany()
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlotPoint");
                });

            modelBuilder.Entity("FantasyDB.Models.Era", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("FantasyDB.Models.Event", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", null)
                        .WithMany("Events")
                        .HasForeignKey("LocationId");

                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("ParentLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FantasyDB.Models.Faction", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Founder")
                        .WithMany()
                        .HasForeignKey("FounderId");

                    b.HasOne("FantasyDB.Models.Location", "HQLocation")
                        .WithMany()
                        .HasForeignKey("HQLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.Navigation("Chapter");

                    b.Navigation("Founder");

                    b.Navigation("HQLocation");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("FantasyDB.Models.Item", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Character", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+LanguageLocation", b =>
                {
                    b.HasOne("FantasyDB.Models.Language", "Language")
                        .WithMany("LanguageLocations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Location", "Location")
                        .WithMany("LanguageLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRiver", b =>
                {
                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointRivers")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.River", "River")
                        .WithMany()
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlotPoint");

                    b.Navigation("River");
                });

            modelBuilder.Entity("FantasyDB.Models.JunctionClasses+PlotPointRoute", b =>
                {
                    b.HasOne("FantasyDB.Models.PlotPoint", "PlotPoint")
                        .WithMany("PlotPointRoutes")
                        .HasForeignKey("PlotPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyDB.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlotPoint");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FantasyDB.Models.Location", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("ParentLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("FantasyDB.Models.PlotPoint", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Calendar", "endDate")
                        .WithMany()
                        .HasForeignKey("endDateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Calendar", "StartDate")
                        .WithMany()
                        .HasForeignKey("startDateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");

                    b.Navigation("StartDate");

                    b.Navigation("endDate");
                });

            modelBuilder.Entity("FantasyDB.Models.River", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "DestinationLocation")
                        .WithMany()
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "SourceLocation")
                        .WithMany()
                        .HasForeignKey("SourceLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DestinationLocation");

                    b.Navigation("SourceLocation");
                });

            modelBuilder.Entity("FantasyDB.Models.Route", b =>
                {
                    b.HasOne("FantasyDB.Models.Location", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyDB.Models.Location", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("FantasyDB.Models.Scene", b =>
                {
                    b.HasOne("FantasyDB.Models.Chapter", "Chapter")
                        .WithMany("Scenes")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("FantasyDB.Models.Act", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("FantasyDB.Models.Book", b =>
                {
                    b.Navigation("Acts");
                });

            modelBuilder.Entity("FantasyDB.Models.Chapter", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("FantasyDB.Models.Language", b =>
                {
                    b.Navigation("LanguageLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("LanguageLocations");
                });

            modelBuilder.Entity("FantasyDB.Models.PlotPoint", b =>
                {
                    b.Navigation("PlotPointRivers");

                    b.Navigation("PlotPointRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
