@model dynamic
@using System.Reflection
@using System.Linq
@using System.Runtime.CompilerServices
@using System.ComponentModel.DataAnnotations
@using FantasyDB.Services

@{
    var currentEntity = ViewData["CurrentEntity"]?.ToString() ?? "Entity";
    var apiEntity = $"api/{currentEntity.ToLower()}";
    var properties = Model.NewSnapshot.GetType().GetProperties();
    var newSnapshot = Model.NewSnapshot;
    var versions = Model.ExistingVersions;
    var vmType = Model.NewSnapshot.GetType();

}

<h2>Create New Snapshot for @currentEntity</h2>

<h4>New Version (Snapshot)</h4>
<a href="/api/@currentEntity.ToLower()" class="btn btn-secondary mb-3">← Back to @currentEntity list</a>
<form id="newSnapshotForm">
    <input type="hidden" name="Id" value="0" />
    <table class="table table-bordered">
        <tbody>
            @foreach (var prop in properties)
            {
                if (prop.Name == "Id" || (prop.Name.EndsWith("Name") && prop.Name != "Name")) continue;

                var editable = ((IEnumerable<object>)prop.GetCustomAttributes(typeof(EditableForSnapshotAttribute), true)).Any();

                var value = prop.GetValue(Model.NewSnapshot);

                <tr>
                    <td><strong>@prop.Name</strong></td>
                    <td>
                        @if (editable)
                        {
                            var listKey = prop.Name + "List";
                            var dropdownList = ViewData[listKey] as IEnumerable<SelectListItem>;

                            if (dropdownList != null)
                            {
                                <select class="form-control" name="@prop.Name">
                                    <option value="">-- Select --</option>
                                    @foreach (var item in dropdownList)
                                    {
                                        <option value="@item.Value" selected="@(item.Value == (value?.ToString()) ? "selected" : null)">
                                            @item.Text
                                        </option>
                                    }
                                </select>
                            }
                            else
                            {
                                <input class="form-control" name="@prop.Name" value="@value" />
                            }
                        }
                        else
                        {
                            <span>@value</span>
                            <input type="hidden" name="@prop.Name" value="@value" />
                        }
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <button class="btn btn-success" type="submit">Create Snapshot</button>
    <a href="/@currentEntity" class="btn btn-secondary">Back</a>
</form>

<h4>Existing Versions</h4>
<div id="existingVersionsContainer">
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var prop in properties)
                {
                    if (!prop.Name.EndsWith("Id")) // Show everything except *Id
                    {
                        <th>@prop.Name</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var version in versions)
            {
                <tr>
                    @foreach (var prop in properties)
                    {
                        if (!prop.Name.EndsWith("Id")) // Same filter here
                        {
                            var value = prop.GetValue(version);
                            <td>@(value?.ToString() ?? "")</td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
</div>


<script>
    document.querySelector("#newSnapshotForm").addEventListener("submit", async function (e) {
            e.preventDefault();

        const form = e.target;
        const data = {};
        new FormData(form).forEach((value, key) => {
            data[key] = value;
        });

        const api = "@apiEntity/create";

        try {
            const response = await fetch("/" + api, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

              if (response.ok) {
            // Refresh just the versions table
            const snapshotPageUrl = window.location.href;
            const pageResponse = await fetch(snapshotPageUrl);
            const pageHtml = await pageResponse.text();

            // Replace the #existingVersionsContainer content
            const parser = new DOMParser();
            const newDoc = parser.parseFromString(pageHtml, "text/html");
            const newTable = newDoc.querySelector("#existingVersionsContainer");
            document.querySelector("#existingVersionsContainer").innerHTML = newTable.innerHTML;

            alert("Snapshot created!");
        } else {
            const error = await response.text();
            alert("Error creating snapshot:\n" + error);
        }
        } catch (err) {
            console.error(err);
            alert("Unexpected error.");
        }
    });
</script>
