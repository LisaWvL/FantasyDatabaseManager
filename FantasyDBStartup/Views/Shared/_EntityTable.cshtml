@using System.Reflection
@using Microsoft.AspNetCore.Mvc.Rendering
@model IEnumerable<object>

@{
    var entityName = ViewData["CurrentEntity"]?.ToString() ?? "Entity";
    var apiEntityName = "api/" + entityName.ToLower();

    var groupedByName = Model
        .GroupBy(c => c.GetType().GetProperty("Name")?.GetValue(c)?.ToString())
        .ToDictionary(g => g.Key, g => g.ToList());
}

<div class="table-responsive">
    <table class="table table-bordered table-striped text-nowrap">
        <thead class="table-dark">
            <tr>
                @if (Model.Any())
                {
                    var firstItem = Model.First();
                    foreach (var prop in firstItem.GetType().GetProperties())
                    {
                        if (prop.Name == "Id" || prop.Name.EndsWith("Id")) continue;
                        <th style="min-width: 150px;">@prop.Name</th>
                    }
                    <th style="min-width: 180px;">Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groupedByName)
            {
                var name = group.Key;
                var versions = group.Value;
                var main = versions.First();
                var itemId = main.GetType().GetProperty("Id")?.GetValue(main)?.ToString() ?? "0";

                <tr class="main-row" data-id="@itemId" data-name="@name">
                    @foreach (var prop in main.GetType().GetProperties())
                    {
                        if (prop.Name == "Id" || prop.Name.EndsWith("Id")) continue;
                        var value = prop.GetValue(main);

                        <td>
                            <span class="view-mode">@value</span>
                            <input class="edit-mode form-control" name="@prop.Name" type="text" value="@value" hidden />
                        </td>
                    }
                    <td>
                        <button class="btn btn-warning edit-btn view-mode">Edit</button>
                        <button class="btn btn-info snapshot-btn view-mode">Create New Snapshot</button>
                        @if (versions.Count > 1)
                        {
                            <button class="btn btn-outline-dark toggle-versions-btn view-mode" data-name="@name">▼ Show Versions</button>
                        }
                        <button class="btn btn-success save-btn edit-mode" hidden>Save</button>
                        <button class="btn btn-secondary cancel-btn edit-mode" hidden>Cancel</button>
                    </td>
                </tr>

                foreach (var version in versions.Skip(1))
                {
                    var versionId = version.GetType().GetProperty("Id")?.GetValue(version)?.ToString() ?? "0";
                    <tr class="snapshot-row" data-group="@name" data-id="@versionId" hidden>
                        @foreach (var prop in version.GetType().GetProperties())
                        {
                            if (prop.Name == "Id" || prop.Name.EndsWith("Id")) continue;
                            var value = prop.GetValue(version);
                            <td>@value</td>
                        }
                        <td>
                            <button class="btn btn-warning edit-btn view-mode">Edit</button>
                            <button class="btn btn-success save-btn edit-mode" hidden>Save</button>
                            <button class="btn btn-secondary cancel-btn edit-mode" hidden>Cancel</button>
                            <button class="btn btn-danger delete-btn view-mode">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const entity = "@entityName";
        const apiEntity = "@apiEntityName";

        document.querySelectorAll(".edit-btn").forEach(button => {
            button.addEventListener("click", function () {
                const row = this.closest("tr");
                row.querySelectorAll(".view-mode").forEach(el => el.hidden = true);
                row.querySelectorAll(".edit-mode").forEach(el => el.hidden = false);
            });
        });

        document.querySelectorAll(".cancel-btn").forEach(button => {
            button.addEventListener("click", function () {
                const row = this.closest("tr");
                row.querySelectorAll(".view-mode").forEach(el => el.hidden = false);
                row.querySelectorAll(".edit-mode").forEach(el => el.hidden = true);
            });
        });

        document.querySelectorAll(".save-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const row = this.closest("tr");
                const id = row.getAttribute("data-id");
                const data = {};

                row.querySelectorAll("input[name], select[name]").forEach(input => {
                    data[input.name] = input.value;
                });

                const isNew = id === "0" || !id;
                const url = isNew ? `/${apiEntity}/create` : `/${apiEntity}/${id}`;
                const method = isNew ? "POST" : "PUT";

                try {
                    const response = await fetch(url, {
                        method,
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        const error = await response.text();
                        alert("Failed to save changes:\n" + error);
                    }
                } catch (err) {
                    console.error("Error saving:", err);
                    alert("Unexpected error.");
                }
            });
        });

        document.querySelectorAll(".delete-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const row = this.closest("tr");
                const id = row.getAttribute("data-id");
                if (confirm("Are you sure you want to delete this entry?")) {
                    try {
                        const response = await fetch(`/${apiEntity}/${id}`, { method: "DELETE" });
                        if (response.ok) row.remove();
                        else alert("Failed to delete entry.");
                    } catch (err) {
                        console.error("Delete failed:", err);
                        alert("Unexpected error.");
                    }
                }
            });
        });

        document.querySelectorAll(".snapshot-btn").forEach(button => {
            button.addEventListener("click", function () {
                const row = this.closest("tr");
                const id = row.getAttribute("data-id");
                const url = `/${apiEntity}/${id}/new-snapshot-page`;
                window.location.href = url;
            });
        });

        document.querySelectorAll(".toggle-versions-btn").forEach(button => {
            button.addEventListener("click", function () {
                const name = this.getAttribute("data-name");
                const rows = document.querySelectorAll(`.snapshot-row[data-group='${name}']`);
                rows.forEach(r => r.hidden = !r.hidden);
                this.textContent = rows[0].hidden ? "▼ Show Versions" : "▲ Hide Versions";
            });
        });
    });
</script>